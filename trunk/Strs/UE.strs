struct UnrealPackage
{
  x32 PackageId;
  u16 Version;
  u16 LicenseeMode;
  x32 Flags;
  i32 NameTableCount;
  x32 NameTableOffset;
  i32 ExportTableCount;
  x32 ExportTableOffset;
  i32 ImportTableCount;
  x32 ImportTableOffset;
  child UnrealName [group=Names, offset=NameTableOffset, count=NameTableCount];
  child UnrealExport [group=Export, offset=ExportTableOffset, count=ExportTableCount];
  child UnrealImport [group=Import, offset=ImportTableOffset, count=ImportTableCount];
}

struct UnrealName
{
  [hidden] u8 length;
  str [len=length] Name;
  x32 Flags;
}

[fieldlike]
struct UnrealIndex
{
  [hidden] u8 b0;
  local result [value=0];
  if ((b0 & 0x40) != 0)
  {
    [hidden] u8 b1;
    if ((b1 & 0x80) != 0)
    {
      [hidden] u8 b2;
      if ((b2 & 0x80) != 0)
      {
        
      }
      local result [value=(result << 7) | (b2 & 0x7f)];
    }
    local result [value=(result << 7) | (b1 & 0x7f)];
  }
  local result [value=(result << 6) | (b0 & 0x3f)];
  if ((b0 & 0x80) != 0)
  {
    local result [value=-result];
  }
  calc x [value=result];
}

[fieldlike]
struct UnrealNameRef
{
  [hidden] include UnrealIndex;
  str Name [value=Root.Child("Names", x).Name];
}

[fieldlike]
struct UnrealClassRef
{
  [hidden] include UnrealIndex;
  if (x < 0)
  {
    str Name [value=Root.Child("Import", -x-1).ObjectName];
  }
  elif (x > 0)
  {
    str Name [value=Root.Child("Export", x-1).ObjectName];
  }
  else
  {
    str [len=0] Name;
  }
}

enum ObjectFlags
{
  RF_Transactional,
  RF_Unreachable,
  RF_Public,
  RF_TagImp,
  RF_TagExp,
  RF_SourceModified,
  RF_TagGarbage,
  RF_Private,
  RF_Unk_00000100,
  RF_NeedLoad,
  RF_HighlightedName,
  RF_InSingularFunc,
  RF_Suppress,
  RF_InEndState,
  RF_Transient,
  RF_PreLoading,
  RF_LoadForClient,
  RF_LoadForServer,
  RF_LoadForEdit,
  RF_Standalone,
  RF_NotForClient,
  RF_NotForServer,
  RF_NotForEdit,
  RF_Destroyed,
  RF_NeedPostLoad,
  RF_HasStack,
  RF_Native,
  RF_Marked,
  RF_ErrorShutdown,
  RF_DebugPostLoad,
  RF_DebugSerialize,
  RF_DebugDestroy
}

struct UnrealExport
{
  include UnrealClassRef [tag=Class];
  include UnrealClassRef [tag=Super];
  u32 GroupIndex;
  include UnrealNameRef [tag=ObjectName];
  set32 Flags [enum=ObjectFlags];
  include UnrealIndex [tag=SerialSize];
  if (SerialSize > 0)
  {
    include UnrealIndex [tag=SerialOffset];
    if (Class == "")
    {
      child UnrealClass [offset=SerialOffset];
    }
    elif (Class == "Function" || Class == "IntProperty" || Class == "ObjectProperty" 
        || Class == "StrProperty" || Class == "FloatProperty")
    {
      child UnrealDataWithPropertyList [offset=SerialOffset];
    }
    else
    {
      seek SerialOffset;
      blob SerialSize [tag=Serialized];
    }
  }
}

struct UnrealImport
{
  include UnrealNameRef [tag=ClassPackageName];
  include UnrealNameRef[tag=ClassName];
  i32 Package;
  include UnrealNameRef [tag=ObjectName];
}

struct UnrealField
{
  include UnrealIndex [tag=SuperField];
  include UnrealIndex [tag=Next];
}

struct UnrealStruct
{
  include UnrealField;
  include UnrealIndex [tag=ScriptText];
  include UnrealIndex [tag=Children];
  include UnrealNameRef [tag=FriendlyName];
  if (Root.Version >= 120)
  {
    u32;
  }
  i32 Line;
  i32 TextPos;
  u32 ScriptSize;
  if (ScriptSize > 0)
  {
    blob ScriptSize [tag=Script];
  }
}

struct UnrealState
{
  include UnrealStruct;
  x64 ProbeMask;
  x64 IgnoreMask;
  x16 LabelTableOffset;
  x32 StateFlags;
}

struct ClassDependency
{
  include UnrealIndex [tag=Class];
  u32 Deep;
  x32 ScriptTextCRC;
}

struct UnrealClass
{
  include UnrealState;
  x32 ClassFlags;  
  repeat(4) { x32 GUID; }
  include UnrealIndex [tag=DependencyCount];
  repeat(DependencyCount)
  {
   include ClassDependency;
  }
  include UnrealIndex [tag=PackageImportCount];
  repeat(PackageImportCount)
  {
    include UnrealNameRef [tag=PackageImport];
  }
  if (Root.Version >= 62)
  {
    include UnrealIndex [tag=ClassWithin];
    include UnrealIndex [tag=ClassConfigName];
  }
  if (Root.Version >= 100)
  {
    include UnrealIndex [tag=HideCategoriesListSize];
    repeat(HideCategoriesListSize)
    {
      include UnrealIndex [tag=HideCategory];
    }
  }
  child UnrealProperty;
}

struct UnrealDataWithPropertyList
{
  child UnrealProperty;
  if (Parent.Class == "Function")
  {
    child UnrealFunctionData [followchildren];
  }
  elif (Parent.Class == "IntProperty" || Parent.Class == "StrProperty" || 
      Parent.Class == "FloatProperty")
  {
    child UnrealClassPropertyData [followchildren];
  }
  elif (Parent.Class == "ObjectProperty")
  {
    child UnrealObjectPropertyData [followchildren];
  }
}

enum FunctionFlag
{
  Final,
  Defined,
  Iterator,
  Latent,
  PreOperator,
  Singular,
  Net,
  NetReliable,
  Simulated,
  Exec,
  Native,
  Event,
  Operator,
  Static,
  NoExport,
  Const,
  Invariant,
  Unk_20000,
  Delegate
}

struct UnrealClassProperty
{
  child UnrealProperty;
  child UnrealClassPropertyData [followchildren];
}

enum ClassPropertyFlag
{
  CPF_Edit,
  CPF_Const,
  CPF_Input,
  CPF_ExportObject,
  CPF_OptionalParm, 
  CPF_Net,
  CPF_ConstRef,
  CPF_Parm,
  CPF_OutParm,
  CPF_SkipParm,
  CPF_ReturnParm,
  CPF_CoerceParm,
  CPF_Native,
  CPF_Transient,
  CPF_Config,
  CPF_Localized,
  CPF_Travel,
  CPF_EditConst,
  CPF_GlobalConfig,
  CPF_OnDemand,
  CPF_New,
  CPF_NeedCtorLink,
  CPF_01000000,
  CPF_EditorData,
  CPF_EditInlineUse,
  CPF_EditInline,
  CPF_Deprecated
}

struct UnrealClassPropertyData
{
  include UnrealField;
  u16 ArrayDimension;
  u16 ElementSize;
  set32 PropertyFlags [enum=ClassPropertyFlag];
  include UnrealNameRef [tag=Category];
}

struct UnrealObjectPropertyData
{
  include UnrealClassPropertyData;
  include UnrealClassRef [tag=Object];
}

struct UnrealFunctionData
{
  include UnrealStruct;
  u16 iNative;
  u8 OperatorPrecedence;
  set32 [enum=FunctionFlag] FunctionFlags;
}

enum PropertyType
{
  otNone,
  otByte,
  otInt,
  otBool,
  otFloat,
  otObject,
  otName,
  otString,
  otClass,
  otArray,
  otStruct,
  otVector,
  otRotator,
  otStr,
  otMap,
  otFixedArray
}

enum SizeType
{
  S1, S2, S4, S12, S16, SByte, SWord, SDword
}

struct UnrealProperty
{
  include UnrealNameRef [tag=Name];
  if (Name != "None")
  {
    bitfield(1)
    {
      enum8 Type [frombit=0, tobit=3, enum=PropertyType];
      enum8 Size [frombit=4, tobit=6, enum=SizeType];
      u8 Array [bit=7];
    }
    if (Size == S1)
    {
      local DataSize [value=1];
    }
    elif (Size == S2)
    {
      local DataSize [value=2];
    }
    elif (Size == S4)
    {
      local DataSize [value=4];
    }
    elif (Size == SByte)
    {
      u8 DataSize;
    }
    if (Type == otStr)
    {
      u8 StrSize;
      str [len=StrSize] StrValue;
    }
    elif (Type == otFloat && DataSize == 4)
    {
      float FloatValue;
    }
    else
    {
      blob DataSize [tag=Data];
    }
    sibling UnrealProperty;
  }
}